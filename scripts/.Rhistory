g + geom_tiplab()
MRCA(g,"cell4628loc1", "cell4232loc1")
help(MRCA)
#g2_pie_toy <- viewClade(g2_pie, MRCA(g,"cell5338loc1", "cell5378loc1"))
g2_pie_toy <- viewClade(g2_pie, ggtree::MRCA(g,"cell4628loc1", "cell4232loc1"))
ggtree::MRCA
help(ggtree::MRCA)
help("MRCA")
g2_pie_toy <- viewClade(g2_pie, node = ggtree::MRCA(g,"cell4628loc1", "cell4232loc1"))
g2_pie_toy <- viewClade(g2_pie, node = 1)
g2_pie_toy
library(tumortree)
library(tidyverse)
library(HDInterval)
library(coda)
library(beastio)
library(treeio)
library(ggtree)
library(phangorn)
library(tumortree)
library(tidyverse)
library(HDInterval)
library(coda)
library(beastio)
library(treeio)
library(ggtree)
library(phangorn)
colors_edge_center <- get_color_palette(names = c("edge", "center"))
#mcc_tree <- read.beast("/Volumes/BALAENA/projects/spatial_tumor_growth_simulation/outputs/beast_analysis/state_dependent_clock_model/validation/logs2/death_rate_validation_pop_1000_dr_0.29_n_100_state_clock_estimate_dr.typed.node.trees.mcc")
mcc_tree <- read.beast("../eden/trees/death_rate_validation_pop_1000_dr_0.29_n_100_state_clock_estimate_dr.typed.node.trees.mcc")
colors_loc <- colors_edge_center
names(colors_loc) <- c("loc1", "loc0")
mcc_tree <- read.beast("/Volumes/BALAENA/projects/spatial_tumor_growth_simulation/outputs/beast_analysis/state_dependent_clock_model/validation/logs2/death_rate_validation_pop_1000_dr_0.29_n_100_state_clock_estimate_dr.typed.node.trees.mcc")
colors_loc <- colors_edge_center
names(colors_loc) <- c("loc1", "loc0")
anc_state_nodes <- mcc_tree@data %>%
mutate(type.prob = as.numeric(type.prob)) %>%
dplyr::mutate(edge = type.prob * as.integer(type == "loc1") + (1 - type.prob)*as.integer(type == "loc0")) %>%
dplyr::mutate(center = type.prob * as.integer(type == "loc0") + (1 - type.prob)*as.integer(type == "loc1")) %>%
dplyr::select(center, edge, type, node)
#colors_edge_center <- c("edge" = "#75ACBA", "center" = "#A28F7B")
pies <- nodepie(anc_state_nodes, cols=1:2, alpha=0.8, color = colors_edge_center)
g <- ggtree(mcc_tree, color = "darkgrey") +
#geom_point(size = 2) +
scale_color_manual(values = colors_loc) +
theme(legend.position = "none")
g_pie <- ggtree::inset(g, pies, width = 0.066, height = 0.066) + theme(legend.position = "none")
g_pie
g2 <- ggtree(mcc_tree, color = "darkgrey") +
geom_point(size = 2) +
scale_color_manual(values = colors_loc) +
theme(legend.position = "none")
g2_pie <- ggtree::inset(g2, pies, width = 0.07, height = 0.07) + theme(legend.position = "none")
ggtree::MRCA(g,"cell4628loc1", "cell4232loc1")
g2 + geom_tiplab()
#g2_pie_toy <- viewClade(g2_pie, MRCA(g,"cell5338loc1", "cell5378loc1"))
g2_pie_toy <- viewClade(g2_pie, ggtree::MRCA(g2,"cell4628loc1", "cell4232loc1"))
mcc_tree@phylo$tip.label %in% c("cell5338loc1", "cell5378loc1")
mcc_tree@phylo$tip.label
mcc_tree@phylo$tip.label %in% c("cell4628loc1", "cell4232loc1")
which(mcc_tree@phylo$tip.label %in% c("cell4628loc1", "cell4232loc1"))
help(MRCA)
MRCA(mcc_tree, cell4628loc1", "cell4232loc1")
MRCA(mcc_tree, "cell4628loc1", "cell4232loc1")
#g2_pie_toy <- viewClade(g2_pie, MRCA(g,"cell5338loc1", "cell5378loc1"))
selected_leaves <- which(mcc_tree@phylo$tip.label %in% c("cell4628loc1", "cell4232loc1"))
selected_leaves
g + geom_tiplab()
g2_pie_toy <- viewClade(g2_pie, MRCA(g2,"cell4628loc1", "cell4232loc0"))
g2_pie_toy
## Toy tree for model schematic
pies2 <- nodepie(anc_state_nodes, cols=1:2, alpha=1, color = colors_edge_center)
g2 <- ggtree(mcc_tree, color = "darkgrey") +
geom_point(size = 2) +
scale_color_manual(values = colors_loc) +
theme(legend.position = "none")
g2_pie <- ggtree::inset(g2, pies2, width = 0.07, height = 0.07) + theme(legend.position = "none")
ggsave(plot=g2_pie_toy,
file ="../figures/toy_ancestral_state_recon_tree.png", height = 5, width = 5)
#g2_pie_toy <- viewClade(g2_pie, MRCA(g,"cell5338loc1", "cell5378loc1"))
# selected_leaves <- which(mcc_tree@phylo$tip.label %in% c("cell4628loc1", "cell4232loc1"))
# selected_node <- MRCA(mcc_tree, selected_leaves[1], selected_leaves[2])
g2_pie_toy <- viewClade(g2_pie, MRCA(g2,"cell4628loc1", "cell4232loc0"))
colors_edge_center <- get_color_palette(names = c("edge", "center"))
colors_loc <- colors_edge_center
names(colors_loc) <- c("loc1", "loc0")
## Toy tree for model schematic
pies2 <- nodepie(anc_state_nodes, cols=1:2, alpha=1, color = colors_edge_center)
g2 <- ggtree(mcc_tree, color = "darkgrey") +
geom_point(size = 2) +
scale_color_manual(values = colors_loc) +
theme(legend.position = "none")
g2_pie <- ggtree::inset(g2, pies2, width = 0.07, height = 0.07) + theme(legend.position = "none")
## Toy tree for model schematic
pies2 <- nodepie(anc_state_nodes, cols=1:2, alpha=1, color = colors_edge_center)
g2 <- ggtree(mcc_tree, color = "darkgrey") +
geom_point(size = 2) +
scale_color_manual(values = colors_loc) +
theme(legend.position = "none")
g2_pie <- ggtree::inset(g2, pies2, width = 0.07, height = 0.07) + theme(legend.position = "none")
g2_pie_toy <- viewClade(g2_pie, MRCA(g2,"cell4628loc1", "cell4232loc0"))
g2_pie_toy + geom_tiplab()
colors_edge_center
#mcc_tree <- read.beast("/Volumes/BALAENA/projects/spatial_tumor_growth_simulation/outputs/beast_analysis/state_dependent_clock_model/validation/logs2/death_rate_validation_pop_1000_dr_0.29_n_100_state_clock_estimate_dr.typed.node.trees.mcc")
mcc_tree <- read.beast("../eden/trees/death_rate_validation_pop_1000_dr_0.29_n_100_state_clock_estimate_dr.typed.node.trees.mcc")
colors_loc <- colors_edge_center
names(colors_loc) <- c("loc1", "loc0")
anc_state_nodes <- mcc_tree@data %>%
mutate(type.prob = as.numeric(type.prob)) %>%
dplyr::mutate(edge = type.prob * as.integer(type == "loc1") + (1 - type.prob)*as.integer(type == "loc0")) %>%
dplyr::mutate(center = type.prob * as.integer(type == "loc0") + (1 - type.prob)*as.integer(type == "loc1")) %>%
dplyr::select(center, edge, type, node)
pies <- nodepie(anc_state_nodes, cols=1:2, alpha=0.8, color = colors_edge_center)
g_pie <- ggtree::inset(g, pies, width = 0.066, height = 0.066) + theme(legend.position = "none")
g <- ggtree(mcc_tree, color = "darkgrey") +
#geom_point(size = 2) +
scale_color_manual(values = colors_loc) +
theme(legend.position = "none")
g2 <- ggtree(mcc_tree, color = "darkgrey") +
geom_point(size = 2) +
scale_color_manual(values = colors_loc) +
theme(legend.position = "none")
g2_pie <- ggtree::inset(g2, pies2, width = 0.07, height = 0.07) + theme(legend.position = "none")
g2_pie_toy <- viewClade(g2_pie, MRCA(g2,"cell4628loc1", "cell4232loc0"))
g2_pie_toy + geom_tiplab()
g_pie
ggsave(plot=g_pie, file ="../figures/example_ancestral_state_recon_tree.png", height = 5, width = 5)
## Toy tree for model schematic
pies2 <- nodepie(anc_state_nodes, cols=1:2, alpha=1, color = colors_edge_center)
ggsave(plot=g2_pie_toy,
file ="../figures/toy_ancestral_state_recon_tree.png", height = 5, width = 5)
## To visualize tip labels
ggtree(mcc_tree, aes(color = type)) +
#geom_point(size = 2) +
scale_color_manual(values = colors_loc) +
theme(legend.position = "none") + geom_tiplab()
library(devtools)
#' Get color palette
#'
#' Get color palette to use to plot edge versus center, boundary-driven versus unrestricted growth.
#'
#' @param names vector of names to include for colors. For example "edge", "center"
#'
#' @return vector
#' @export
get_color_palette <- function(names = c("edge", "center", "boundary_driven", "unrestricted")){
all_colors <- c("edge" = "#89352F",
"center" = "#A2D2E2"
"boundary_driven" = "#e49a8b",
"unrestricted" = "#3C3C3C")
return(all_colors[names])
}
#' Get color palette
#'
#' Get color palette to use to plot edge versus center, boundary-driven versus unrestricted growth.
#'
#' @param names vector of names to include for colors. For example "edge", "center"
#'
#' @return vector
#' @export
get_color_palette <- function(names = c("edge", "center", "boundary_driven", "unrestricted")){
all_colors <- c("edge" = "#89352F",
"center" = "#A2D2E2"
"boundary_driven" = "#e49a8b",
"unrestricted" = "#3C3C3C")
return(all_colors[names])
}
#' Get color palette
#'
#' Get color palette to use to plot edge versus center, boundary-driven versus unrestricted growth.
#'
#' @param names vector of names to include for colors. For example "edge", "center"
#'
#' @return vector
#' @export
get_color_palette <- function(names = c("edge", "center", "boundary_driven", "unrestricted")){
all_colors <- c("edge" = "#89352F",
"center" = "#A2D2E2"
"boundary_driven" = "#e49a8b",
"unrestricted" = "#3C3C3C")
return(all_colors[names])
}
#' Get color palette
#'
#' Get color palette to use to plot edge versus center, boundary-driven versus unrestricted growth.
#'
#' @param names vector of names to include for colors. For example "edge", "center"
#'
#' @return vector
#' @export
get_color_palette <- function(names = c("edge", "center", "boundary_driven", "unrestricted")){
all_colors <- c("edge" = "#89352F",
"center" = "#A2D2E2",
"boundary_driven" = "#e49a8b",
"unrestricted" = "#3C3C3C")
return(all_colors[names])
}
colors_edge_center <- get_color_palette(names = c("edge", "center"))
example_mcmc_log_file <- "/Volumes/BALAENA/projects/spatial_tumor_growth_simulation/outputs/beast_analysis/state_dependent_clock_model/validation/logs2/death_rate_validation_pop_1000_dr_0.29_n_100_state_clock_estimate_dr.log"
# Example edge - center difference posterior distibution
example_birth_rates_diff_posteriors <- example_mcmc_log %>%
dplyr::mutate(birthRateDiff = birthRateCanonical.1 -  birthRateCanonical.0) %>%
ggplot(aes(x = birthRateDiff)) + geom_density(fill = "darkgrey", alpha = 0.8) +
theme_classic() + xlab("Estimated birth rate difference") + ylab("") +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line.y=element_blank()) +
theme(text = element_text(size = 20)) +
geom_vline(xintercept = true_example_diff_df$true_birth_rate_diff_weighted[1], linetype = "dashed")
example_mcmc_log <- as.data.frame(readLog(example_mcmc_log_file))
example_birth_rates_diff_posteriors_summary <- example_mcmc_log %>%
dplyr::mutate(birthRateDiff = birthRateCanonical.1 -  birthRateCanonical.0) %>%
dplyr::summarise(mean = mean(birthRateDiff),
hpd_90_lower = hdi(birthRateDiff,
credMass =0.9)[1],
hpd_90_upper = hdi(birthRateDiff,
credMass =0.9)[2])
# Get true simulated rates
#From extract_validation_sims_rates.R
true_example_diff_df <- read_csv("../eden/stats/validation_growth_and_death_rates_weighted.csv") %>%
dplyr::mutate(true_birth_rate_diff_weighted = mean_edge_birth_rate - mean_center_birth_rate) %>%
dplyr::select(dr, true_birth_rate_diff_weighted) %>%
dplyr::filter(dr == "0.29")
# Example edge - center difference posterior distibution
example_birth_rates_diff_posteriors <- example_mcmc_log %>%
dplyr::mutate(birthRateDiff = birthRateCanonical.1 -  birthRateCanonical.0) %>%
ggplot(aes(x = birthRateDiff)) + geom_density(fill = "darkgrey", alpha = 0.8) +
theme_classic() + xlab("Estimated birth rate difference") + ylab("") +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line.y=element_blank()) +
theme(text = element_text(size = 20)) +
geom_vline(xintercept = true_example_diff_df$true_birth_rate_diff_weighted[1], linetype = "dashed")
# Example edge - center posterior distibutions
example_birth_rates_posteriors <- example_mcmc_log %>%
tidyr::pivot_longer(cols = c("birthRateCanonical.1", "birthRateCanonical.0"),
names_prefix = "birthRateCanonical.",
values_to = "birthRate",
names_to = "state") %>%
ggplot(aes(x = birthRate, fill = ifelse(state == 1, "edge", "center"))) + geom_density(alpha = 0.8, aes(fill = ifelse(state == 1, "edge", "center"))) +
theme_classic() + xlab("Estimated birth rate") + ylab("") +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line.y=element_blank()) +
scale_fill_manual(values = colors_edge_center) +
theme(legend.position = "none") +
theme(text = element_text(size = 20))
example_birth_rates_diff_posteriors
example_birth_rates_posteriors
ggsave(plot=example_birth_rates_diff_posteriors, file ="../figures/example_birth_rates_diff_posteriors.png", height = 5, width = 4.5)
ggsave(plot=example_birth_rates_posteriors, file ="../figures/example_birth_rates_posteriors.png", height = 5, width = 4.5)
#mcc_tree <- read.beast("/Volumes/BALAENA/projects/spatial_tumor_growth_simulation/outputs/beast_analysis/state_dependent_clock_model/validation/logs2/death_rate_validation_pop_1000_dr_0.29_n_100_state_clock_estimate_dr.typed.node.trees.mcc")
mcc_tree <- read.beast("../eden/trees/death_rate_validation_pop_1000_dr_0.29_n_100_state_clock_estimate_dr.typed.node.trees.mcc")
colors_loc <- colors_edge_center
names(colors_loc) <- c("loc1", "loc0")
anc_state_nodes <- mcc_tree@data %>%
mutate(type.prob = as.numeric(type.prob)) %>%
dplyr::mutate(edge = type.prob * as.integer(type == "loc1") + (1 - type.prob)*as.integer(type == "loc0")) %>%
dplyr::mutate(center = type.prob * as.integer(type == "loc0") + (1 - type.prob)*as.integer(type == "loc1")) %>%
dplyr::select(center, edge, type, node)
pies <- nodepie(anc_state_nodes, cols=1:2, alpha=0.8, color = colors_edge_center)
g <- ggtree(mcc_tree, color = "darkgrey") +
#geom_point(size = 2) +
scale_color_manual(values = colors_loc) +
theme(legend.position = "none")
g_pie <- ggtree::inset(g, pies, width = 0.066, height = 0.066) + theme(legend.position = "none")
## Toy tree for model schematic
pies2 <- nodepie(anc_state_nodes, cols=1:2, alpha=1, color = colors_edge_center)
## To visualize tip labels
ggtree(mcc_tree, aes(color = type)) +
#geom_point(size = 2) +
scale_color_manual(values = colors_loc) +
theme(legend.position = "none") + geom_tiplab()
g2 <- ggtree(mcc_tree, color = "darkgrey") +
geom_point(size = 2) +
scale_color_manual(values = colors_loc) +
theme(legend.position = "none")
g2_pie <- ggtree::inset(g2, pies2, width = 0.07, height = 0.07) + theme(legend.position = "none")
g2_pie_toy <- viewClade(g2_pie, MRCA(g2,"cell4628loc1", "cell4232loc0"))
ggsave(plot=g2_pie_toy,
file ="../figures/toy_ancestral_state_recon_tree.png", height = 5, width = 5)
ggsave(plot=g_pie, file ="../figures/example_ancestral_state_recon_tree.png", height = 5, width = 5)
g2_pie <- ggtree::inset(g2, pies2, width = 0.08, height = 0.08) + theme(legend.position = "none")
g2_pie_toy <- viewClade(g2_pie, MRCA(g2,"cell4628loc1", "cell4232loc0"))
ggsave(plot=g2_pie_toy,
file ="../figures/toy_ancestral_state_recon_tree.png", height = 5, width = 5)
g2 <- ggtree(mcc_tree, color = "darkgrey", size = 2) +
geom_point(size = 2) +
scale_color_manual(values = colors_loc) +
theme(legend.position = "none")
g2_pie <- ggtree::inset(g2, pies2, width = 0.08, height = 0.08) + theme(legend.position = "none")
g2_pie_toy <- viewClade(g2_pie, MRCA(g2,"cell4628loc1", "cell4232loc0"))
ggsave(plot=g2_pie_toy,
file ="../figures/toy_ancestral_state_recon_tree.png", height = 5, width = 5)
library(tumortree)
library(tidyverse)
#Published edge/center labels from Li et al (Table S8)
t1_li_edge_labels <- data.frame("sample" = c("t1z5", "t1l13", "t1z1", "t1f24", "t1z3", "t1f23", "t1f11", "t1l8", "t1f14", "t1f9", "t1l1", "t1l10", "t1l3", "t1f2", "t1l6", "t1f4"),
"edgeP" = c(1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))
t2_li_edge_labels <- data.frame("sample" = c("t2z11", "t2z13", "t2z1", "t2f9", "t2f5", "t2f2", "t2f13", "t2z9", "t2z6"),
"edgeP" = c(1, 1, 1, 0, 0, 0, 0, 0, 0))
tumor_purities <- read_csv("../li-application/li_hcc_data/li_table_s2_purities.csv") %>%
dplyr::mutate(Sample = tolower(Sample))
colnames(tumor_purities) <- c("sample", "mapping_rate", "depth", "n_snvs", "purity", "ploidy")
# colnames(t1_truncal_mutations) <- c("contig", "position")
# t1_truncal_mutations <- t1_truncal_mutations %>%
#     add_column("mark" = "truncal")
#T2
# t2_truncal_mutations <- read_csv("../li-application/li_hcc_data/t2_truncal_mutations.csv", col_names = FALSE)
# colnames(t2_truncal_mutations) <- c("contig", "position")
# t2_truncal_mutations <- t2_truncal_mutations %>%
#     add_column("mark" = "truncal")
#tumor 1
#note: files are named w/ .csv extension but are actually tab-delimited
t1_wgs_snvs_files <- list.files(path = "data/All_SNV_MBE2022Li", pattern = "t1", full.names = TRUE)
#tumor 2
t2_wgs_snvs_files <- list.files(path = "data/All_SNV_MBE2022Li", pattern = "t2", full.names = TRUE)
header_info <- read.table(file = "data/All_SNV_MBE2022Li/head.csv")
setwd("/Volumes/BALAENA/projects/spatial_tumor_growth_simulation/outputs/beast_analysis/state_dependent_clock_model/primary_tumor_analysis/li")
#Published edge/center labels from Li et al (Table S8)
t1_li_edge_labels <- data.frame("sample" = c("t1z5", "t1l13", "t1z1", "t1f24", "t1z3", "t1f23", "t1f11", "t1l8", "t1f14", "t1f9", "t1l1", "t1l10", "t1l3", "t1f2", "t1l6", "t1f4"),
"edgeP" = c(1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))
t2_li_edge_labels <- data.frame("sample" = c("t2z11", "t2z13", "t2z1", "t2f9", "t2f5", "t2f2", "t2f13", "t2z9", "t2z6"),
"edgeP" = c(1, 1, 1, 0, 0, 0, 0, 0, 0))
tumor_purities <- read_csv("../li-application/li_hcc_data/li_table_s2_purities.csv") %>%
dplyr::mutate(Sample = tolower(Sample))
colnames(tumor_purities) <- c("sample", "mapping_rate", "depth", "n_snvs", "purity", "ploidy")
# colnames(t1_truncal_mutations) <- c("contig", "position")
# t1_truncal_mutations <- t1_truncal_mutations %>%
#     add_column("mark" = "truncal")
#T2
# t2_truncal_mutations <- read_csv("../li-application/li_hcc_data/t2_truncal_mutations.csv", col_names = FALSE)
# colnames(t2_truncal_mutations) <- c("contig", "position")
# t2_truncal_mutations <- t2_truncal_mutations %>%
#     add_column("mark" = "truncal")
#tumor 1
#note: files are named w/ .csv extension but are actually tab-delimited
t1_wgs_snvs_files <- list.files(path = "data/All_SNV_MBE2022Li", pattern = "t1", full.names = TRUE)
#tumor 2
t2_wgs_snvs_files <- list.files(path = "data/All_SNV_MBE2022Li", pattern = "t2", full.names = TRUE)
header_info <- read.table(file = "data/All_SNV_MBE2022Li/head.csv")
##tumor 1
t1_snv_list <- list()
t1_all_sites_list <- list()
for (f1 in t1_wgs_snvs_files) {
sample_extract <- gsub(".csv", "", basename(f1))
punch_extract <- gsub("t1", "", sample_extract)
slice_extract <- gsub("[[:digit:]]","", punch_extract)
punch_num_extract <- gsub("[a-z]","", punch_extract)
# punch_snvs <- read.table(text = gsub("\t", ",", readLines(f1)), sep = ",")
punch_snvs <- read.table(f1, header = FALSE, sep = "\t")
colnames(punch_snvs) <- header_info
punch_snvs <- punch_snvs %>%
add_column(sample = sample_extract, punch = punch_extract, slice = slice_extract, punch_num = punch_num_extract)
t1_snv_list[[sample_extract]] <- punch_snvs
punch_sites <- punch_snvs %>%
dplyr::filter(judgement == "KEEP") %>%
dplyr::select(contig, position, ref_allele)
t1_all_sites_list[[sample_extract]] <- punch_sites
}
t1_all_sites_df <- t1_all_sites_list %>%
bind_rows %>%
distinct
t2_all_sites_df <- t2_all_sites_list %>%
bind_rows %>%
distinct
#tumor 2
t2_snv_list <- list()
t2_all_sites_list <- list()
for (f2 in t2_wgs_snvs_files) {
sample_extract <- gsub(".csv", "", basename(f2))
punch_extract <- gsub("t2", "", sample_extract)
slice_extract <- gsub("[[:digit:]]","", punch_extract)
punch_num_extract <- gsub("[a-z]","", punch_extract)
# punch_snvs <- read.table(text = gsub("\t", ",", readLines(f1)), sep = ",")
punch_snvs <- read.table(f2, header = FALSE, sep = "\t")
colnames(punch_snvs) <- header_info
punch_snvs <- punch_snvs %>%
add_column(sample = sample_extract, punch = punch_extract, slice = slice_extract, punch_num = punch_num_extract)
t2_snv_list[[sample_extract]] <- punch_snvs
punch_sites <- punch_snvs %>%
dplyr::filter(judgement == "KEEP") %>%
dplyr::select(contig, position, ref_allele)
t2_all_sites_list[[sample_extract]] <- punch_sites
}
# #function to make vafs for wgs
make_vafs <- function(punch_snvs, all_sites, vaf_cutoff = 0.1) {
punch_snvs_vafs <- punch_snvs %>%
dplyr::select(contig, position, ref_allele, alt_allele, t_ref_count, t_alt_count) %>%
left_join(all_sites, .) %>%
dplyr::mutate(t_alt_vaf = t_alt_count /(t_ref_count + t_alt_count)) %>%
dplyr::mutate(basecall = ifelse(is.na(t_alt_vaf), ref_allele, ifelse(t_alt_vaf <= vaf_cutoff, ref_allele, alt_allele))) %>%
dplyr::mutate(variant = ifelse(basecall == alt_allele, 1, 0)) %>%
tibble::add_column(sample = punch_snvs$sample[1] )
return(punch_snvs_vafs)
}
vaf_cutoff = 0.05
t1_vaf_list <- purrr::map(t1_snv_list,
function(x) make_vafs(punch_snvs = x,
all_sites = t1_all_sites_df,
vaf_cutoff = vaf_cutoff))
t2_vaf_list <- purrr::map(t2_snv_list,
function(x) make_vafs(punch_snvs = x,
all_sites = t2_all_sites_df,
vaf_cutoff = vaf_cutoff))
t1_vaf_df <- t1_vaf_list %>%
bind_rows %>%
left_join(.,t1_li_edge_labels) %>%
left_join(.,tumor_purities) %>%
mutate(adj_vaf = t_alt_vaf/as.numeric(purity))
t1_all_sites_df <- t1_all_sites_list %>%
bind_rows %>%
distinct
t2_all_sites_df <- t2_all_sites_list %>%
bind_rows %>%
distinct
# #function to make vafs for wgs
make_vafs <- function(punch_snvs, all_sites, vaf_cutoff = 0.1) {
punch_snvs_vafs <- punch_snvs %>%
dplyr::select(contig, position, ref_allele, alt_allele, t_ref_count, t_alt_count) %>%
left_join(all_sites, .) %>%
dplyr::mutate(t_alt_vaf = t_alt_count /(t_ref_count + t_alt_count)) %>%
dplyr::mutate(basecall = ifelse(is.na(t_alt_vaf), ref_allele, ifelse(t_alt_vaf <= vaf_cutoff, ref_allele, alt_allele))) %>%
dplyr::mutate(variant = ifelse(basecall == alt_allele, 1, 0)) %>%
tibble::add_column(sample = punch_snvs$sample[1] )
return(punch_snvs_vafs)
}
vaf_cutoff = 0.05
t1_vaf_list <- purrr::map(t1_snv_list,
function(x) make_vafs(punch_snvs = x,
all_sites = t1_all_sites_df,
vaf_cutoff = vaf_cutoff))
t2_vaf_list <- purrr::map(t2_snv_list,
function(x) make_vafs(punch_snvs = x,
all_sites = t2_all_sites_df,
vaf_cutoff = vaf_cutoff))
t1_vaf_df <- t1_vaf_list %>%
bind_rows %>%
left_join(.,t1_li_edge_labels) %>%
left_join(.,tumor_purities) %>%
mutate(adj_vaf = t_alt_vaf/as.numeric(purity))
t1_vaf_df_truncal <- t1_vaf_df %>%
group_by(contig, position) %>%
summarize(n_samples = sum(variant, na.rm = TRUE)) %>%
dplyr::filter(n_samples == length(t1_snv_list)) %>%
add_column("mark" = "truncal")
t2_vaf_df_truncal <- t2_vaf_df %>%
group_by(contig, position) %>%
summarize(n_samples = sum(variant, na.rm = TRUE)) %>%
dplyr::filter(n_samples == length(t2_snv_list)) %>%
add_column("mark" = "truncal")
t2_vaf_df <- t2_vaf_list %>%
bind_rows %>%
left_join(., t2_li_edge_labels)%>%
left_join(.,tumor_purities) %>%
mutate(adj_vaf = t_alt_vaf/as.numeric(purity))
t1_vaf_df_truncal <- t1_vaf_df %>%
group_by(contig, position) %>%
summarize(n_samples = sum(variant, na.rm = TRUE)) %>%
dplyr::filter(n_samples == length(t1_snv_list)) %>%
add_column("mark" = "truncal")
t2_vaf_df_truncal <- t2_vaf_df %>%
group_by(contig, position) %>%
summarize(n_samples = sum(variant, na.rm = TRUE)) %>%
dplyr::filter(n_samples == length(t2_snv_list)) %>%
add_column("mark" = "truncal")
t1_vaf_df <- t1_vaf_df %>%
left_join(t1_vaf_df_truncal)
t2_vaf_df <- t2_vaf_df %>%
left_join(t2_vaf_df_truncal)
t1_vaf_df_marked <- t1_vaf_df %>%
dplyr::filter(mark == "truncal")
t2_vaf_df_marked <- t2_vaf_df %>%
dplyr::filter(mark == "truncal")
edge_center_colors <- get_color_palette(names = c("edge", "center"))
t1_vaf_histograms <- ggplot(t1_vaf_df, (aes(x=t_alt_vaf, fill = ifelse(edgeP == 1, "edge", "center")))) +
geom_histogram(color = "black", bins = 30) + theme_bw() + facet_wrap(~sample, ncol = 4) +
geom_histogram(color = "black", bins = 30, fill = "grey", data = t1_vaf_df_marked, alpha = 0.5) +
#geom_vline(xintercept = 0.25, linetype = "dashed") +
scale_fill_manual(values = edge_center_colors) +
theme(legend.position = "none") +
theme(text=element_text(size = 15)) +
xlab("Variant Allele Frequency")
#geom_point(data = t1_vaf_df_marked, color = "black", y=0)
t1_vaf_histograms
t1_vaf_histograms <- ggplot(t1_vaf_df, (aes(x=t_alt_vaf, fill = ifelse(edgeP == 1, "edge", "center")))) +
geom_histogram(color = "black", bins = 30) + theme_bw() + facet_wrap(~toupper(sample), ncol = 4) +
geom_histogram(color = "black", bins = 30, fill = "grey", data = t1_vaf_df_marked, alpha = 0.5) +
#geom_vline(xintercept = 0.25, linetype = "dashed") +
scale_fill_manual(values = edge_center_colors) +
theme(legend.position = "none") +
theme(text=element_text(size = 15)) +
xlab("Variant Allele Frequency")
#geom_point(data = t1_vaf_df_marked, color = "black", y=0)
t1_vaf_histograms
setwd("~/Documents/PhD/Bedford_lab/spatial-tumor-phylodynamics/scripts")
ggsave(t1_vaf_histograms, file = "../figures/t1_vaf_histograms.png", height = 7, width = 10)
t2_vaf_histograms <- ggplot(t2_vaf_df, (aes(x=t_alt_vaf, fill = ifelse(edgeP == 1, "edge", "center")))) +
geom_histogram(color = "black", bins = 30) + theme_bw() +
geom_histogram(color = "black", fill = "grey", data = t2_vaf_df_marked, alpha = 0.5, bins = 30) +
facet_wrap(~toupper(sample), ncol = 4) +
#geom_vline(xintercept = 0.25, linetype = "dashed") +
scale_fill_manual(values = edge_center_colors) +
theme(legend.position = "none")  +
theme(text=element_text(size = 15)) +
xlab("Variant Allele Frequency")
#geom_point(data = t2_vaf_df_marked, color = "black", y=0)
t2_vaf_histograms
ggsave(t2_vaf_histograms, file = "../figures/t2_vaf_histograms.png", height = 7*0.75, width = 10)
